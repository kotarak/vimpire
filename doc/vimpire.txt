*vimpire.txt*                         *vimpire* *clojure*

Vimpire - A Clojure Environment
===============================

Introduction
------------

Vimpire is a development environment for Clojure. It provides interactive
features like async completion, documentation lookup and a Repl running in a
Vim buffer.

Socket Server
-------------

To use the interactive part you have to start a socket server on the clojure
side. Example invocation:
>
        clj '-J-Dclojure.server.repl={:port 5432 :accept clojure.core.server/repl}' -r
<
This may look different depending on your system. Note, that no further setup
on the backend is necessary.

Before using the interactive features you have to connect to the Clojure
backend server.

:VimpireBite <server>               *:VimpireBite*
                        Start a new connection to the backend server.
                        <server> are coordinates of the form <host>:<port>.
                        Example:
>
                            :VimpireBite localhost:5432
<
There may be connections to several different backend servers. Start one
connection in the root of one project. Change you current working directory to
the second project. Start the second connection. Now all the files should see
the correct connection depending on their project root.

If a buffer has no associated filename, the current working directory is used
to the select the backend connection.

However, this functionality is not really well tested, since I usually don't
work that way. So expect mayhem.

Windows
-------

Vimpire might pop up windows, like the preview window or the Repl. The place
where this is done may be controlled with the SplitPos variable. Possible
values are "left", "right", "top" and "bottom". The default is "top".

Example:
>
        let g:vimpire_window_split_pos = "left"
<
It is also possible to specify the size of the new window. The size is
specified in lines/columns.
>
        let g:vimpire_window_split_size = 10
<
You can close the popup result window by binding the
<Plug>(vimpire_close_result_buffer) to your liking.

Errors
------

Errors are reported in a temporary buffer. This is to make error messages
more readable. In particular when they contain stacktraces from the Java
side. However this may interfer with scripts which do not expect that a
new buffer pops up. So one can go back to the old behaviour.
>
        let g:vimpire_ui_use_error_buffer = 0
<
Keybindings
-----------

Vimpire does not define any keybindings on its own. However it provides
so-called plugs for each command.

<Plug>(vimpire_eval)                            *VimpireEval*
                        The eval operator. Send off the expression covered
                        by the following motion to the backend server.
                        This plays with the vim-sexp plugin.

<Plug>(vimpire_require_file)                    *VimpireRequireFile*
                        Require the namespace of the current file with
                        the :reload flag. Note: For this to work with
                        a remote Clojure server, the files have to put in
                        place before issuing the command, eg. via scp
                        or NFS.

<Plug>(vimpire_require_file_all)                *VimpireRequireFileAll*
                        Require the namespace of the current file with
                        the :reload-all flag. Note: For this to work with
                        a remote Clojure server, the files have to put in
                        place before issuing the command, eg. via scp
                        or NFS.

<Plug>(vimpire_run_tests)                       *VimpireRunTests*
                        Require the namespace of the filename with the
                        :reload flag. Then use clojure.test to run the
                        tests of the namespace via run-tests.
                        Note: For this to work with a remote Clojure
                        server, the files have to put in place before
                        issuing the command, eg. via scp or NFS.

<Plug>(vimpire_macro_expand)                    *VimpireMacroExpand*
                        The macro expansion operator. Send the expression
                        covered by the following motion to the backend
                        server for macro expansion. Play well with the
                        vim-sexp plugin.

<Plug>(vimpire_macro_expand1)                   *VimpireMacroExpand1*
                        Same as MacroExpand, but use macroexpand-1.

<Plug>(vimpire_doc_lookup_word)                 *VimpireDocLookupWord*
                        Lookup up the word under the cursor and print
                        the documentation for it via (doc).

<Plug>(vimpire_doc_lookup_interactive)          *VimpireDocLookupInteractive*
                        Lookup the documentation of an arbitrary word.
                        The user is prompted for input.

<Plug>(vimpire_find_doc)                        *VimpireFindDoc*
                        Find a the documentation for a given pattern
                        with (find-doc). The user is prompted for input.

<Plug>(vimpire_javadoc_lookup_word)             *VimpireJavadocLookupWord*
                        Open the javadoc for the word under the cursor
                        in an external browser. You may specify URLs for
                        package directories in the configuration variable
                        g:vimpire_javadoc_path_map, which maps package
                        prefixes to URLs. Longest match wins. The browser
                        used should be the default browser configured for
                        system, but may be changed with the configuration
                        variable g:vimpire_browser.

<Plug>(vimpire_javadoc_lookup_interactive)      *VimpireJavadocLookupInteractive*
                        Open the javadoc for an arbitrary word in an
                        external browser. The user is prompted for input.

<Plug>(vimpire_source_lookup_word)              *VimpireSourceLookupWord*
                        Show a read-only view of the source the word under
                        the cursor. For this to work, the source must be
                        available in the Classpath or as a file (depending
                        on how the source was loaded).

<Plug>(vimpire_source_lookup_interactive)       *VimpireSourceLookupInteractive*
                        Show a read-only view of the source of an arbitrary
                        word. For this to work, the source must be available
                        in the Classpath or as a file (depending on how the
                        source was loaded).

<Plug>(vimpire_goto_source_word)                *VimpireGotoSourceWord*
                        Goto the source of the word under the cursor. For this
                        to work, the source must be available in a directory
                        of the |'path'| option.

<Plug>(vimpire_goto_source_interactive)         *VimpireGotoSourceInteractive*
                        Goto the source of an arbitrary word. For this to work,
                        the source must be available in a directory of the
                        |'path'| option.

Vim Repl
--------

Start a Repl via the |:VimpireRepl| command. At the prompt just type
expressions. Hitting enter will determine, whether the expression is
complete and will send it to the Clojure instance. In case the expression
is incomplete, eg. after "(defn foo" will result in a newline for multiline
expressions.

A newline will also be inserted if you are inside of the expression. The
expression will only be submitted to the Repl when you hit enter after
the last character of the buffer. If you are inside the expression and
want to start the evaluation immediately you may use <C-CR> instead of
the plain <CR>.

Previously sent expressions may be recalled via <C-Up> and <C-Down>.
Note: sending multiple expressions will save them in the same history
entry. So playing back with <C-Up> will again send all of the contained
expressions.

If the current line starts with a repl prompt, the *^* command moves to
the end of the prompt and not to the beginning of the line.

The Plugs are:
 - <Plug>(vimpire_repl_enter_hook) for the enter key
 - <Plug>(vimpire_repl_evaluate) for evaluation (<C-CR>)
 - <Plug>(vimpire_repl_hat_hook) for ^ navigation
 - <Plug>(vimpire_repl_up_history) for going backwards in history (<C-Up>)
 - <Plug>(vimpire_repl_down_history) for going forwards in history (<C-Down>)

The following convenience commands are provided:

 - ,close - close the Repl and free the Repl resources in the server process

After command submission the repl changes into stdin mode until a new prompt
is requested by the backend side. In this mode each typed line will be sent
over the wire after hitting <CR>. If this input is not consumed by your
previously submitted command, it will be consumed by the repl after the
prompt. However it will not show up in the repl history in this case. So be
warned of race conditions.

:VimpireRepl                                    *:VimpireRepl*
                        Start a new Vim Repl in a fresh buffer. There
                        might be multiple Repls at the same time. This
                        command works independently of any loaded clojure
                        files.

Here be Dragons!

The repl is just a buffer. It's not a terminal. So we have to sync on
something. That something is the prompt. If you delete it, you will get into
trouble. If you don't allow the repl to sync up with the backend and keep its
state clean, you will get into trouble.

The repl is all in all functional, but rather fragile. If you cannot cope
with that, then don't use it.

Unrepl Elisions
---------------

Unrepl provides so-called elisions. From the standard clojure repl we
know that eg. very long collections are cut-off to prevent an overflow
of printed information. Unrepl lifts that to the next level in providing
a way to actually retrieve the elided values and extend the already shown
information. The Vimpire repl shows at the corresponding points so called
elision markers. <Plug>(vimpire_repl_expand_elision) may be used to
expand the elision marker under the cursor. Likewise, to specify the
elision id manually <Plug>(vimpire_repl_expand_elision_interactive) may
be used. Example:
>
        user=> (range)
        (0 1 2 3 4 5 6 7 8 9 vv1)
        user=>
<
As you can see the normally very dangerous act of printing an infinite
sequence, works perfectly well with this approach since the values are
cut-off at some point. The fangs at the end of the printed sequence
indicate, that there are more values which can be sucked from the victim
process. Placing the cursor marker and executing the <Plug> expands the
marker in place.
>
        user=> (range)
        (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 vv2)
        user=>
<
Again, there is another marker, so the process may be repeated. Of course
the prompt and any already entered text will be kept intact. Should the
expansion of the elision not be possible anymore, the marker is turned
into an ellipsis.
>
        user=> (range)
        (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 …)
        user=>
<
This works also for vectors, sets, maps and string. While for the
collections the markers are displayed in line with the other values,
for strings the marker immediately follows the string, which also ends
in a ellipsis to indicate that there are more characters available.
>
        user=> (apply str (repeat 200 \a))
        "aaaaaaaaaa…"vv1
        user=> (vec (take 25 (range)))
        [0 1 2 3 4 5 6 7 8 9 vv1]
        user=> (set (take 25 (range)))
        #{0 7 20 1 24 4 15 21 13 22 vv1}
        user=> (into {} (map-indexed vector (repeat 25 \a)))
        {0 "a" 7 "a" 20 "a" 1 "a" 24 "a" 4 "a" 15 "a" 21 "a" … vv1}
        user=>
<

Async Completion
----------------

Vimpire supports async completion for clojure code via the asyncomplete.vim
plugin. Please refer to the asyncomplete-vimpire.vim plugin.
>
        https://bitbucket.org/kotarak/asyncomplete-vimpire.vim
        https://github.com/kotarak/asyncomplete-vimpire.vim
<
If you want to support other async completion systems, you may contact me for
extension points, so that you can write the necessary glue yourself.

Dynamic Highlighting
--------------------

Upon opening a file, Vimpire loads the namespace in the backend server and
traverses all required and aliased namespaces. It collects all functions and
macro definitions and provides the given information back to Vim to properly
highlight the used function and macro names. However this might be slow
depending on the circumstances. Therefore you can disable dynamic
highlighting.
>
        let g:vimpire_dynamic_highlighting = v:false
<

License
-------

Copyright © 2008-2018 Meikel Brandmeyer, Frankfurt am Main
All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
==============================================================================
.. vim: set ft=help norl ts=8 tw=78 et :
